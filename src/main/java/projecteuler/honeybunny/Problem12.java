package projecteuler.honeybunny;

import java.util.Iterator;

/**
 * Highly divisible triangular number
 * Problem 12
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
 * number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {
    private static final int TARGET_DIVISORS = 500;

    public static void main(String[] args) {
        Iterator<Integer> triangleNumIterator = getTriangleNumIterator();
        while (triangleNumIterator.hasNext()) {
            int curr = triangleNumIterator.next();
            if (getNumOfDivisors(curr) > TARGET_DIVISORS) {
                System.out.println("Result is " + curr);
                return;
            }
        }
    }

    private static int getNumOfDivisors(int input) {
        int count = 0;
        for (int i = 1; i < (int) Math.sqrt(input); i++) {
            if (input % i == 0) {
                // If input has i as a factor, input/i
                // is also a factor, so we add two to the count of factors.
                count += 2;
            }
        }

        // If input is perfect square, we only add one to count.
        if (Math.pow((int) Math.sqrt(input), 2) == input) {
            count++;
        }
        return count;
    }


    private static Iterator<Integer> getTriangleNumIterator() {
        return new Iterator<>() {
            int sumSoFar = 0;
            int nextIndex = 1;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public Integer next() {
                sumSoFar += nextIndex;
                nextIndex++;
                return sumSoFar;
            }
        };
    }
}
